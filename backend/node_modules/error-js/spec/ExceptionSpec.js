describe("Default Namespace", function (){
    var error = require("../error", "error");
    error = error.noConflict();
    it("can attach names", function (){
        expect(error.getFullPackageName("Again", "Hello.World"))
            .toBe("Hello.World.Again");

        expect(error.getFullPackageName("Again.Test", "Hello.World."))
            .toBe("Hello.World.Again.Test");

        //Error has been ignored.
        expect(error.getFullPackageName("Again.Test", "Error.Hello.World."))
            .toBe("Hello.World.Again.Test");

        expect(error.getFullPackageName("Again.Test", ".Hello.World.Error"))
            .toBe("Hello.World.Again.Test");
    });

    it("can have self-defined ignore rules", function (){
        error.addIgnoranceRules("ClObject");

        expect(error.getFullPackageName("Again.Test", ".Hello.World.Error.ClObject"))
            .toBe("Hello.World.Again.Test");

        expect(error.getFullPackageName("Again.Test", ".Hello.World.Error.clobject"))
            .toBe("Hello.World.clobject.Again.Test");

        error.removeIgnoranceRule("ClObject");
        error.clearPackageNameCache();

        expect(error.getFullPackageName("Again.Test", ".Hello.World.Error.ClObject"))
            .toBe("Hello.World.ClObject.Again.Test");

        error.addIgnoranceRules(/ClObject/i);
        error.clearPackageNameCache();

        expect(error.getFullPackageName("Again.Test", ".Hello.World.Error.clobject"))
            .toBe("Hello.World.Again.Test");

        error.clearIgnoranceRules();
        error.clearPackageNameCache();

        expect(error.getFullPackageName("Again.Test", ".Hello.World.Error.ClObject"))
            .toBe("Hello.World.Error.ClObject.Again.Test");

        error.restoreIgnoranceRules();
        error.clearPackageNameCache();

        expect(error.getFullPackageName("Again", "Hello.World"))
            .toBe("Hello.World.Again");
    });
});

describe("Error Module", function (){

    var error = require("../error", "error");

    it("can register custom errors", function (){
        error.register("NO_NAME", 1, "You don't have any username");
        error.register("org.cauchies.error.NO_NAME", 2, "You don't have any username");

        expect(error.NO_NAME).toEqual({
            name: "NO_NAME",
            id:1,
            desc: "You don't have any username"
        });

        expect(error.getError("org.cauchies.error.NO_NAME")).toEqual({
            name: "org.cauchies.error.NO_NAME",
            id: 2,
            desc: "You don't have any username"
        });

        expect(error.getError("org.cauchies.error.NO_NAME")).toEqual(error.getError("org.cauchies.error.NO_NAME"));

        expect(error.getError("org.cauchies.error.NO_NAME")).toEqual(error.org.cauchies.error.NO_NAME);

        expect(error.removeError("NO_NAME")).toBeTruthy();
        expect(error.getError(2)).toBeTruthy();
        expect(error.removeError("org.cauchies.error.NO_NAME")).toBeTruthy();

        expect(error.getError("NO_NAME")).toBeFalsy();
        expect(error.getError("org.cauchies.error.NO_NAME")).toBeFalsy();
        expect(error.getError(2)).toBeFalsy();
        expect(error.getError(1)).toBeFalsy();

        expect(error.NO_NAME).toBeFalsy();
        expect(error.org.cauchies.error).toBeTruthy();
        expect(error.org.cauchies.error.NO_NAME).toBeFalsy();

        expect(error.register({
            name: "NO_NAME",
            id:1,
            desc: "You don't have any username"
        })).toBeTruthy();

        expect(function (){
            error.register({
                name: "NO_NAME_2",
                id: 1,
                desc: "You don't have any username"
            });
        }).toThrow();


        expect(function (){
            error.register({
                name: "NO_NAME",
                id: 2,
                desc: "You don't have any username"
            });
        }).toThrow();

        expect(function (){
            error.register({
                name: "name",
                id: 2,
                desc: "You don't have any username"
            });
        }).toThrow();

        expect(function (){
            error.register({
                name: "id",
                id: 2,
                desc: "You don't have any username"
            });
        }).toThrow();

        expect(function (){
            error.register({
                name: "id.test",
                id: 3,
                desc: "It should be able to use this as the name"
            });
        }).not.toThrow();

        expect(function (){
            error.register({
                name: "register",
                id: 4,
                desc: "This is not allowed."
            });
        }).toThrow();

        expect(function (){
            error.register({
                name: "register.test2",
                id: 4,
                desc: "But this is allowed."
            });
        }).not.toThrow();

        expect(error.clearAllError()).toBe(3);
        expect(error.getErrorCount()).toBe(0);
    });

    if(typeof process === "object"){
        it("can dump errors into js file", function (){
            var string = error.pack("test.error.math");

            var math = require('path').join(__dirname, '../test/browser-math.js');
            var login = require('path').join(__dirname, '../test/browser-login.js');

            require('fs').writeFileSync(math, string);

            require('fs').writeFileSync(login, error.pack("test.login"));
        });
    }

    it("can load error configurations from disk", function (){
        error.setFileType('js');
        expect(error.getFileType()).toBe('js');

        error.setFileType('json');
        expect(error.getFileType()).toBe('json');

        //Now try to load login error.
        expect(error.require("test.login")).toBeTruthy();

        //Now I should be able to use:
        expect(error.test.login.NO_NAME.id).toBe(1);

        expect(error.require("test.error.math")).toBeTruthy();
        expect(function (){
            error.require("test.login.error.math");
        }).toThrow();

        expect(error.test.math.DIVIDEND.id).toBe(3);
    });



});

describe("Exception Module", function (){
    var error = require("../error", "error");
    //Error = Exception;

    it("can throw new errors by loaded error descriptors", function (){
        expect((new Exception(error.test.login.WRONG_PASSWORD)).message)
            .toEqual("You typed wrong password.");

        expect((new Exception(Exception.test.login.TEST_FORMAT, "Hello World")).message)
            .toEqual("Hello World is coming.");
    });

    it("can understand string.format", function (){
        expect((new Exception("{0}", "Hello World")).message)
            .toEqual("Hello World");

        expect((new Exception("{0} {1} {2}", ["Hello", "World", "Again"])).message)
            .toEqual("Hello World Again");
    });

    it("can use previous error", function (){
        var previous = new Exception("Exception");

        expect(
            (new Exception("{0} {1} {2}",
                ["Hello", "World", "Again"],
                null, previous)).previous
        ).toEqual(previous);
    });

    it("can use extra data", function (){
        var data = {
            'mvc': 'test'
        };

        expect(
            (new Exception("{0} {1} {2}",
                ["Hello", "World", "Again"],
                data)).extra
        ).toEqual(data);
    });

    it("can handle errno and code", function (){
        //Exception.require("test.login");

        var object = new Exception(Exception.test.login.TEST_CODE_AND_NUMBER);
        expect(object.errno).toBe(45);
        expect(object.code).toBe('EEXIST');

        var noName = new Exception(Exception.test.login.NO_NAME);
        expect(noName.errno).toBe(1);

    });
});