/**
 * Created by karl on 14-2-13.
 */

var register_m = require("./register.js", "register");

//This file will test the node registry and calling.
function recordBrowserError(/*Error*/ error)
{
    document.write("<span style='color:red'>" + error.message + "</span><br />");
}

function log(/*Function*/ func, /*string*/ string)
{
    var str =  "[" + func.name + "] " + string;
    console.log(str);

    if(typeof process === "undefined")
    {
        document.write("<span style='color:green'>" + str + "</span><br />");
    }
}

function runTest(/*Function*/ func)
{
    try{
        log(func, "Starting.");

        func();

        log(func, "Passed.");

    }catch(error)
    {
        error.message = "[" + func.name + "] " + error.message;

        if(typeof process === "undefined")
            recordBrowserError(error);

        throw error;
    }
}

function assertTrueReturn(trueReturn){
    //Running under node.js
    if(typeof process != "undefined")
    {
        if(!(trueReturn() === true))
        {
            //
            throw new Error("Failure, expected true");
        }
    }
    else
    {
        if(!(trueReturn === Test.trueReturn))
            throw new Error("Register failure.");

        if(!(Test.trueReturn() === true))
            throw new Error("unexpected value.");
    }
}

function testTrueReturn(){
    var trueReturn = require("./Test/trueReturn.js", "Test.trueReturn");

    assertTrueReturn(trueReturn);
}

function testPredefinedRoot(){
    //This only works for browser.
    require.root = "Test/test-dir/";

    //Works compatible for browser.
    var trueReturn = require("./Test/test-dir/Test/predefinedRoot.js", "Test.predefinedRoot");

    //Running under node.js
    if(typeof process != "undefined")
    {
        if(!(trueReturn() === "Hello World!"))
        {
            throw new Error("Failure, expected 'Hello World!'");
        }
    }
    else
    {
        if(!(trueReturn === Test.predefinedRoot))
            throw new Error("Register failure.");

        if(!(Test.predefinedRoot() === "Hello World!"))
            throw new Error("Unexpected value.");

        register.removePackage("Test.predefinedRoot");
    }
}

function testDotNamespace(){
    require.root = "";

    //Works compatible for browser.
    var trueReturn = require("./Test/trueReturn.js", "Test.trueReturn");

    assertTrueReturn(trueReturn);
}

function testLoadJSON(){
    var trueReturn = requireJSON("Test.json.testJSON");

    if(!(trueReturn.name === "great"))
        throw new Error("Failed to load json");

    requireJSON.fileType = "js";

    var testJS = requireJSON("Test.json.testJS");

    if(!(testJS.name === "great"))
        throw new Error("Failed to load js");

    if(requireJSON.cacheSymbol.Test.json.testJS != testJS)
        throw new Error("Registration failed");

    var scope = {};
    var test = { "name": "test"};
    register.registerPackage(test, "org.cauchies.test", scope);

    if(typeof scope[register.cacheSymbol] != "object" ||
        scope[register.cacheSymbol]["org.cauchies.test"] != test)
        throw new Error("Nothing is cached");

    if(register.getPackage("org.cauchies.test", scope) != test ||
        scope.org.cauchies.test != test){
        throw new Error("Register package failed");
    }

    if(register.removePackage("org.cauchies.test", scope) === false ||
        !(typeof scope.org.cauchies.test === "undefined")){
        throw new Error("Failed to remove package");
    }

    if(register.removePackage("org.cauchies.test", scope) === true){
        throw new Error("That object should have been released.");
    }

    if(register.removePackage("org.cauchies", scope) === false){
        throw new Error("Father scope should exists");
    }

    if(register.removePackage("org.cauchies", scope) === true){
        throw new Error("That namespace should have been released.");
    }

    if(register.removePackage("org.cauchies", false) === true){
        throw new Error("release an non object should not be ok...");
    }

    if(!(typeof scope.org.cauchies === "undefined")){
        throw new Error("That namespace should have been released.");
    }

    if(register.removePackage("org", scope) === false){
        throw new Error("Release the top level scope should be ok.");
    }

    if(register.removePackage("", scope) === true){
        throw new Error("It should be can not release \"\"");
    }
}

runTest(testTrueReturn);
runTest(testPredefinedRoot);
runTest(testDotNamespace);
runTest(testLoadJSON);

log(function passed(){}, "All Test passed");