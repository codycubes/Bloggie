/*
 Copyright (c) 2014 Karl.M.Cauchy

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */

/**
 * @file register.js
 *
 * Register js is a compatible level for Node.js programs to run under broswer
 * environment. To do this, you should add a single line at the end of your
 * javascript file:
 *
 *      var register_js = require("regsiter-js") //Call only once for your entire project.
 *
 *      //Then you can use it anywhere.
 *      register(exportObject, "TestNamespace.TestObject", module);
 *
 * Or if you're not 100% sure register.js has loaded correctly, the following statement
 * will do 100% correctly under both browser and Node.js:
 *
 *      var module = require("register-js")(exportObject, "TestNamespace.TestObject", module);
 *
 * On node.js it will equal to
 *
 *      module.exports = exportObject;
 *
 * On browser script, it will equal to
 *
 *      window.TestNamespace.TestObject = exportObject;
 *
 * Also, register.js will provide you a require function for browser, which is
 * almost as the same as node.
 *
 *      var X = require("TestObject", "TestNamespace.TestObject");
 *
 * And this tool will try to find a resource named as TestNamespace/TestObject.js.
 *
 * The second parameter will be regarded as the better browser option. However,
 * you can write no 2nd parameter as well:
 *
 *      var X = require("TestObject");
 *
 * And this calling will find a javascript file named as TestObject.js.
 *
 * You can set a configuration object as registerConfig:
 *
 *      registerConfig.root = "http://example.com/js/"
 *
 * Then the searching file will be
 *
 *      http://example.com/js/TestNamespace/TestObject.js
 *
 * and
 *      http://example.com/js/TestObject.js
 *
 * Auto-fetch can be useful only when you're running simple websites with limited
 * visitors or testing. Do not use it for large websites, because performance will
 * be a serious problem. Use grunt to compile your javascript code into a single file
 * to avoid multiply loading.
 *
 * ************************************************
 *
 * Since 1.1.0, you can load json files.
 *
 * You can use requireJSON for both node and browser.
 *
 *      requireJSON("test.jsonPackage");
 *
 * This method will look for test/jsonPackage.json. Also, you can use
 *
 *      requireJSON.fileType = "js";
 *
 * To make it work with js files.
 * ************************************************
 *
 * @author Karl.M.Cauchy
 * @date 2014-02-13
 *
 * Browser support:
 *      IE      6.0 +
 *      Firefox 1.0 +
 *      Chrome  1.0 +
 *      Safari  5.0 +
 *      Opera   9.0 +
 */
(function (){

    "use strict";

    /**
     * Root loading path.
     *
     * e.g. http://example.org/js/
     * @type {string}
     */
    var root = './';

    var cacheSymbol = "__register_js_cached_";
    var packageCache = {};

    var node = true;
    if(typeof window === "object" && typeof process != "object"){
        node = false;
        root = '';
    }

    /**
     * @object regsiterConfig.root
     *
     *
     */
    if(typeof registerConfig === "object")
        root = registerConfig.root;


    /**
     * Get browser ajax object.
     * @returns {Object} The browser Ajax object.
     */
    var http = function (){
        if(XMLHttpRequest)
            return new XMLHttpRequest();

        //jQuery uses only Microsoft.XMLHTTP, seems
        //older browser will not be supported.
        if(ActiveXObject)
            return new ActiveXObject("Microsoft.XMLHTTP");

        throw new Error("Could not find XMLHttp object");
    };

    /**
     * Translate the package name from
     *      TestNamespace.Test
     * to
     *      TestNamespace/Test.js
     *
     * @method regsiter.getPackageLocation
     * @param packageName The package name to be translated.
     * @param fileType The file type "js" or "json"
     * @return {String} Translated web package location.
     */
    var getPackageLocation = function (/*String*/packageName, /*String="js"*/ fileType){
        if(typeof fileType != "string") fileType = "js";

        //Check if there is root object changed.
        if(typeof require.root ==="string" && require.root != root)
            root = require.root;

        return root + packageName.replace(/[\.]/g,'/') + "." + fileType;
    };

    /**
     * Get the package element.
     *
     * E.g. Input: TestNamespace.TestObject  or  TestNamespace/TestObject
     *      Output: window[TestNamespace][testObject]
     *
     * @method register.getPackage
     * @param packageName The package name to store.
     * @param storeObject The object of root store.
     * @returns {Object|boolean} Return the package object. Return false for not found.
     */
    var getPackage = function (/*String*/packageName, /*Object=*/ storeObject){
        var cache = initCache(storeObject);
        if(packageName in cache)
            return cache[packageName];

        var array = packageName.split(/[\.]/g);
        var element = (typeof storeObject === "undefined")?
                      (node ? getPackage : window) : storeObject;

        for(var i=0; i<array.length; i++)
        {
            if(!element[array[i]])
                return false;

            element = element[array[i]];
        }

        cache[packageName] = element;
        return element;
    };

    /**
     * Register a package into browser domain.
     *
     * @method register.registerPackage
     * @param packageObject The object to be registered.
     * @param packageName The package name to be registered.
     * @param storeObject where to register to. Default value is window.
     */
    var registerPackage = function (/*Object*/packageObject, /*String*/ packageName,/*Object=window*/storeObject){
        var cache = initCache(storeObject);
        if(packageName in cache) return; //Which means the object has already registered.

        var array = packageName.split(/[\.]/g);
        var element = typeof storeObject === "undefined" ? window : storeObject;

        for(var i=0; i<array.length; i++)
        {
            var elementName = array[i];

            if(!element[elementName])
                if(i == array.length-1)
                    cache[packageName] =
                        element[elementName] = packageObject;
                else
                    element[elementName] = {};

            element = element[elementName];
        }
    };

    function initCache(storeObject) {
        var type = typeof storeObject;
        if(type != "object" && type != "function" && type !="array")
            storeObject = packageCache;

        if (!(cacheSymbol in storeObject))
            storeObject[cacheSymbol] = {};

        return storeObject[cacheSymbol];
    }

    /**
     * Remove a package by its name
     *
     * @method register.removePackage
     * @param packageName The package name to be unregistered.
     * @param storeObject The default global object.
     * @return {boolean} true for success, false for failure.
     */
    var removePackage = function (/*String*/ packageName, /*Object=window*/storeObject){
        var cache = initCache(storeObject);
        var array = packageName.split(/[\.]/g);
        var element = typeof storeObject === "undefined" ? window : storeObject;

        if(array.length === 0) return false;
        var elementName = array[0];
        for(var i=0; i<array.length - 1; i++)
        {
            elementName = array[i];

            if(!element[elementName])
                return false; //Failed to find that package.

            element = element[elementName];
        }

        elementName = array[array.length - 1];
        if(!element[elementName]) return false;

        delete element[elementName];
        //Also, we need to delete cache
        if(packageName in cache)
            delete cache[packageName];

        return true;
    };

    /**
     * Synchronized get remote resource.
     * @param packageName The package name to fetch.
     * @param fileType The file extension.
     * @returns {string} The package content.
     */
    function getPackageSync(/*String*/packageName, /*String="js"*/ fileType) {
        var httpObject = http();

        httpObject.open('GET', getPackageLocation(packageName, fileType), false);
        httpObject.send('');

        if(httpObject.statusCode != 200 && httpObject.status != 200)
            throw new Error("Failed to fetch package " + packageName);

        return httpObject.responseText;
    }

    /**
     * This function only works under browser.
     *
     * Load package with node.js package name or browser package name.
     *
     * Different from Node.js, package name for browser contains package's namespace.
     *
     * @method require
     *
     * @param {String} packageName Node style package name. Please do not add anything like .js, that
     *                    will make this program doesn't work.
     * @param {String=} packageNameForBrowser Browser package name, including path.
     * @returns {*} The package you've load.
     *
     * @example
     *      var ClObject = require("ClObject");
     *      var ClObject = require("ClObject", "path.to.ClObject"); //The browser way.
     */
    var _require = function (/*String*/packageName, /*String=*/packageNameForBrowser){
        //Running under node.js
        if(node)
        {
            //Node.js
            //return system require
            return require(packageName);
        }

        ///////////////////////////////////////////////////////
        //Running on browser.
        ///////////////////////////////////////////////////////

        //If you have specify the packageName for browser,
        //we will use that name.
        if(typeof packageNameForBrowser === "string")
            packageName = packageNameForBrowser;

        //If that package is not found, we will try to load them.
        if(getPackage(packageName) === false){
            //load everything synchronous!
            var script = document.createElement('script');
            script.type = "text/javascript";
            script.text = getPackageSync(packageName);

            document.getElementsByTagName('head')[0].appendChild(script);
        }

        return getPackage(packageName);
    };

    /**
     * Get a json from local or remote file.
     *
     *
     * @method requireJSON
     * @param {String} packageName The package to be loaded.
     * @param {String=} browserPackageName The browser package to be loaded.
     * @returns {Object} Objects we load.
     *
     * @example
     *      var obj = requireJSON("error.login");
     */
    var requireJSON = function (/*String*/ packageName, /*String=*/browserPackageName)
    {
        if(node === false && typeof browserPackageName === "string")
            packageName = browserPackageName;

        if(getPackage(packageName, requireJSON.cacheSymbol) === false){
            var string = "{}";
            if(node){
                var fs = require('fs');
                string = fs.readFileSync(getPackageLocation(packageName, requireJSON.fileType));
            }
            else {
                string = getPackageSync(packageName, requireJSON.fileType);
            }

            /*jshint -W061 */
            var result = eval("(" + string + ")");

            //We need to register it to getPackage scope.
            registerPackage(result, packageName, requireJSON.cacheSymbol);
            return result;
        }

        return getPackage(packageName, requireJSON.cacheSymbol);
    };

    //This function is only for browser;
    if(!node){
        window.require = _require;
        window.requireJSON = requireJSON;
    }

    requireJSON.fileType = "json";
    requireJSON.cacheSymbol = {};

    //Also another function, "Register"
    //will help you get the register problems.
    /**
     * Register an object under global scope for Node.js and browser.
     *
     * @method register
     * @param {*}      exportObject The object to be exported.
     * @param {String} packageName  The package name to be registered. Including namespace name.
     *                              This parameter will be ignored under Node.js
     * @param {Object} moduleObject The module object. This parameter only works under Node.js.
     *
     * @example
     *      regsiter(exportObject, "org.cauchies.test", module);
     */
    var register = function (/*{*}*/exportObject, /*String*/packageName, /*Object=*/moduleObject){
        if(node)
        {
            //Under node.js, we register it by using module.exports
            moduleObject.exports = exportObject;
        }
        else
        {
            //Or otherwise, register the package with his name
            registerPackage(exportObject, packageName);
        }
    };

    //Register this function for browser environment.
    if(!node){
        window.register = register;
        window["register-js"] = register;
        window.module = {};
    }

    //Under node.js
    //export register function
    if(node){
        module.exports = register;
        GLOBAL.register = register;
        GLOBAL.requireJSON = requireJSON;

    }

    register.registerPackage = registerPackage;
    register.removePackage = removePackage;
    register.getPackage = getPackage;
    register.getPackageLocation = getPackageLocation;
    register.getPackageSync = getPackageSync;
    register.cacheSymbol = cacheSymbol;
})();